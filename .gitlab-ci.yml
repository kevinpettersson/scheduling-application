variables:
  DOCKER_DRIVER: overlay2

stages:        
  - build
  - publish
  - deploy

api-build-job:     
  environment: production
  image: docker:latest
  stage: build
  tags:
    - docker-build  # Use the 'docker-build' runner
  script:
    - docker build -t registry.git.chalmers.se/palssons/dit213-group-12/timebridge-api:latest -f timebridge/Dockerfile timebridge/
  artifacts:
    paths:
        - timebridge/target/*.jar
  only:
  - main

web-build-job:
  environment: production
  image: docker:latest
  stage: build
  tags:
    - docker-build  # Use the 'docker-build' runner
  script:
    - docker build -t registry.git.chalmers.se/palssons/dit213-group-12/timebridge-web:latest -f timebridge-web/Dockerfile timebridge-web/
  artifacts:
    paths:
        - timebridge-web/build
  only:
  - main

publish-job:      # This job pushes the docker image to gitlab container registry
  environment: production
  image: docker:latest
  stage: publish  # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - docker-build  # Use the 'docker-build' runner
  services:
    - name: docker:dind
      alias: docker
  script:
    - echo "Login to gitlab..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - echo "Publishing images..."
    - docker push registry.git.chalmers.se/palssons/dit213-group-12/timebridge-api
    - docker push registry.git.chalmers.se/palssons/dit213-group-12/timebridge-web
    - echo "Images successfully published."
  only:
  - main

deploy-job:
  environment: production
  image: alpine:latest
  stage: deploy
  tags:
    - shell
  script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$BASE64_DEPLOY_SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_do_droplet
    - chmod 600 ~/.ssh/id_do_droplet
    - ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    
    - scp -i ~/.ssh/id_do_droplet docker-compose.yml $DROPLET_USER@$DROPLET_IP:~/app/
    - scp -i ~/.ssh/id_do_droplet nginx.conf $DROPLET_USER@$DROPLET_IP:~/app/
    
    - >
      ssh -i ~/.ssh/id_do_droplet $DROPLET_USER@$DROPLET_IP "
      cd ~/app &&
      docker-compose pull &&
      docker-compose down &&
      docker-compose up -d
      "
  only:
    - main
  